package com.mon.pdlconverter;import java.util.ArrayList;import java.util.List;public class Parser {    public static String Error ="";    public Parser() {    }    public String Parsetostring(List<Token> tokenList) {        String pcode="";        String varibles = "";        String stringat = "";        ArrayList<String> checkvar = new ArrayList<>();        boolean haveprint = false;        boolean varfound = false;        int counter = 0;        int countera = 0;        int counterq = 0;        for(int i=0 ;i<tokenList.size(); i++){            //pcode = pcode + tokenList.get(i).getType() +" ";            if(tokenList.get(i).getType() == TokenType.NUMBER){                pcode = pcode + tokenList.get(i).getValue() +" ";            }            else if(tokenList.get(i).getType() == TokenType.OPERATOR){                pcode = pcode + tokenList.get(i).getValue() +" ";            }            else if(tokenList.get(i).getType() == TokenType.LEFT_PAREN) {                pcode = pcode + tokenList.get(i).getValue() +" ";            }else if(tokenList.get(i).getType() == TokenType.RIGHT_PAREN) {                pcode = pcode + tokenList.get(i).getValue() +" ";            }            else if(tokenList.get(i).getType() == TokenType.IDENTIFIER){                pcode = pcode + tokenList.get(i).getValue() +" ";                for (int z = 0 ; z < checkvar.size() ; z++) {                    if(checkvar.get(z).equals(tokenList.get(i).getValue())){                        varfound =true;                    }                }                if (i+1 != tokenList.size()) {                    if(tokenList.get(i+1).getType() == TokenType.DECLARATOR){                        if(varfound){                            pcode = pcode +"= ";                            i ++;                            varfound =false;                        }else if (!varfound){                            pcode = pcode  +"= ";                            checkvar.add(tokenList.get(i).getValue());                            i ++;                        }                    }else if(tokenList.get(i+1).getValue().equals("=")){                        if(varfound){                            pcode = pcode  +"= ";                            i ++;                            varfound =false;                        }else if (!varfound){                            pcode = pcode  +"= ";                            checkvar.add(tokenList.get(i).getValue());                            i ++;                        }                    }                }            }else if(tokenList.get(i).getType() == TokenType.PRINT) {                haveprint = true;                pcode = pcode +"~print " +" ( " ;                if(tokenList.get(i+1).getType() != TokenType.DQUETS){                    i++;                    for (int z = 0 ; z < checkvar.size() ; z++) {                        if(checkvar.get(z).equals(tokenList.get(i ).getValue())){                            varfound =true;                        }                    }                    if(varfound) {                        varfound =false;                        for (int x = i ; x < tokenList.size(); x++) {                            for (int z = 0 ; z < checkvar.size() ; z++) {                                if(checkvar.get(z).equals(tokenList.get(x).getValue())){                                    varfound =true;                                }                            }                            if(varfound) {                                if (tokenList.get(x).getType() == TokenType.IDENTIFIER) {                                    varfound =false;                                    pcode = pcode + tokenList.get(x).getValue() + " ";                                    counter++;//                                }                            }else if (tokenList.get(x).getType() == TokenType.COMMA) {                                pcode = pcode + tokenList.get(x).getValue() + " " ;                                counter++;                            }else if (tokenList.get(x).getType() == TokenType.NUMBER) {                                pcode = pcode + tokenList.get(x).getValue() ;                                counter++;                            }else if (tokenList.get(x).getType() == TokenType.DQUETS) {                                //counter++;                                break;                            }else if(tokenList.get(x).getType() == TokenType.DOT) {                                counter--;                                break;                            }else if(!varfound){                                Error = " can't print undeclared variable";                                tokenList.clear();                                pcode = "";                                break;                            }else{                                break;                            }                        }                        pcode = pcode + " )  ~";                        i= i+counter;                        counter = 0;                        //varfound =false;                    }else if(tokenList.get(i).getType() == TokenType.NUMBER){                        pcode = pcode +tokenList.get(i).getValue() ;                        if(tokenList.get(i+1).getType() == TokenType.COMMA){                            pcode = pcode +" , ";                            i++;                        }else if (tokenList.get(i+1).getType() != TokenType.COMMA){                            pcode = pcode  +" )  ~";                            i++;                        }                    }else if(!varfound){                        Error = " can't print undeclared variable";                        tokenList.clear();                        pcode = "";                    }                }            }            else if(tokenList.get(i).getType() == TokenType.DQUETS) {                for (int q = i ;q < tokenList.size();q++) {                    stringat = stringat + tokenList.get(q).getValue() + " ";                    if(tokenList.get(q+1).getType() == TokenType.DQUETS){                        counterq = q+2;                        //haveprint=false;                        break;                    }                }//                for(int j = 0;j<counterq;j++) {//                    tokenList.remove(tokenList.get(j));////                }                if(haveprint) {                    if(counterq != tokenList.size()  ) {                        for (int b=counterq; b<tokenList.size();b++) {                            if (tokenList.get(counterq).getType() == TokenType.COMMA) {                                pcode = pcode + stringat + " \" , " + tokenList.get(counterq + 1).getValue() ;                                stringat = "";                                counterq++;                                i = (counterq );                            }                            if (tokenList.get(counterq).getType() == TokenType.DOT){                                pcode = pcode + stringat + " \" ) ~";                                stringat = "";                                i = counterq ;                                break;                            }                        }                    }                    else {                        pcode = pcode + stringat + " \" ) ~";                        stringat = "";                        i = (counterq -1);                        counterq = 0;                    }                }                if (!haveprint){                    pcode = pcode + stringat +"\" ~";                    stringat = "";                    i=counterq-1;                    counterq=0;                }                haveprint=false;                System.out.println(i);            }            else if(tokenList.get(i).getType() == TokenType.READ){                checkvar.add(tokenList.get(i+1).getValue());                varibles = varibles + tokenList.get(i+1).getValue();                pcode = pcode + varibles + " = input('enter " + varibles+ " : ')~";                varibles = "";                i++;                for(int x =i; x<tokenList.size()-1;x++) {                    if(tokenList.get(x).getType() ==TokenType.IDENTIFIER) {                        if (tokenList.get(x + 1).getType() == TokenType.COMMA) {                            checkvar.add(tokenList.get(x+2).getValue());                            varibles = varibles + tokenList.get(x + 2).getValue();                            pcode = pcode + varibles + " = input('enter " + varibles + " : ')~";                            varibles = "";                            x++;                            counter++;//                        }else if (tokenList.get(x).getType() == TokenType.IDENTIFIER){//                            varibles = varibles + tokenList.get(x).getValue();////                            pcode = pcode + varibles + " = input('enter " + varibles + "')~";//                            varibles = "";//                            counter++;//                        }                    }else if (tokenList.get(x).getType() ==TokenType.READ){                            varibles = varibles + tokenList.get(x+1).getValue();                            checkvar.add(tokenList.get(x+1).getValue());                            pcode = pcode + varibles + " = input('enter " + varibles + " : ')~";                            varibles = "";                            counter++;                    }else{                        break;                    }                }                for(int j = 0;j<counter;j++) {                    tokenList.remove(tokenList.get(j));                }                i=i+counter;                counter=0;            }            else if(tokenList.get(i).getType() == TokenType.ASSIGN){                for(int l=i+1;l<tokenList.size();l++){                    if(tokenList.get(l).getType()==TokenType.IDENTIFIER){                        checkvar.add(tokenList.get(l).getValue());                        pcode = pcode  + " ~ " + tokenList.get(l).getValue() + " = ";                        countera ++;                        if(tokenList.get(l+1).getType()==TokenType.COMMA){                            pcode = pcode + "0  ~ " ;                            countera ++;                        }                    }else if(tokenList.get(l).getType()==TokenType.AS){                        if(tokenList.get(l+1).getType()==TokenType.INTEGER) {                            pcode = pcode + "0  ~ " ;                            countera = countera+2;                            break;                        }else if(tokenList.get(l+1).getType()==TokenType.STRING) {                            pcode = pcode + " \" \"  ~ " ;                            countera = countera+2;                            break;                        }else if(tokenList.get(l+1).getType()==TokenType.FLOAT) {                            pcode = pcode + "0.0  ~ " ;                            countera = countera+2;                            break;                        }else if(tokenList.get(l+1).getType()==TokenType.BOOLEAN) {                            pcode = pcode + "false  ~ " ;                            countera = countera+2;                            break;                        }                    }                }                i=i+countera;                countera=0;            }            else if(tokenList.get(i).getType() == TokenType.ADD) {                for (int z = 0; z < checkvar.size(); z++) {                    if (checkvar.get(z).equals(tokenList.get(i + 1).getValue())) {                        varfound = true;                    }                }                if (!varfound) {                    Error = " Can't Add Undeclared Variable";                    tokenList.clear();                    pcode = "";                }else if(tokenList.get(i+1).getType() == TokenType.IDENTIFIER) {                    varfound = false;                    pcode = pcode + " ~ Hamada = ";                    pcode = pcode + tokenList.get(i+1).getValue() ;                    countera++;                    for (int k = i+3;k<tokenList.size();k++) {                        if (tokenList.get(k).getType() == TokenType.IDENTIFIER) {                            pcode = pcode + " + " +tokenList.get(k).getValue() ;                            countera= countera+2;                        }else if (tokenList.get(k+1).getType() != TokenType.COMMA) {                            break;                        }                    }                    pcode = pcode + " ~ "  ;                    i=i + countera;                    countera=0;                }            }else if(tokenList.get(i).getType() == TokenType.IF){                pcode = pcode + " ~if ("  ;                i++;                for (int r=i; r<tokenList.size();r++){                        if(tokenList.get(r).getType() !=TokenType.THEN) {                            for (int z = 0; z < checkvar.size(); z++) {                                if (checkvar.get(z).equals(tokenList.get(r).getValue())) {                                    varfound = true;                                }                            }                            if(tokenList.get(r).getType() ==TokenType.CONDITION ||tokenList.get(r).getType() ==TokenType.NUMBER || tokenList.get(r).getType() ==TokenType.OPERATOR) {                                varfound = true;                            }                            if(varfound) {                                varfound = false;                                pcode = pcode + " " + tokenList.get(r).getValue();                                counterq++;                            }else if (!varfound) {                                Error = " Can't Make Condition to Undeclared Variable";                                tokenList.clear();                                pcode = "";                            }                        }else if(tokenList.get(r).getType() ==TokenType.THEN) {                            pcode = pcode + " ) : \n \t" ;                            counterq++;                            break;                        }                }                i=i+counterq;                counterq=0;                for (int r=i; r<tokenList.size();r++){                    if(tokenList.get(r).getType() !=TokenType.ENDIF) {                        if(tokenList.get(r).getType() ==TokenType.PRINT) {                            pcode = pcode + " print ( " + tokenList.get(r+1).getValue();                            counterq++;                            r++;                        }else{                            pcode = pcode + " " + tokenList.get(r).getValue();                            counterq++;                        }                    }else if(tokenList.get(r).getType() ==TokenType.ENDIF) {                        pcode = pcode + " ) ~";                        break;                    }                }                i=i+counterq;                counterq=0;            }            else if(tokenList.get(i).getType() == TokenType.UNKNOWN){                Error = "Unknown token";                tokenList.clear();                pcode = "";            }        }        return pcode;    }}